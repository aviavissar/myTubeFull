{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\AVIA\\\\Desktop\\\\youTubeNew\\\\myTubeFull\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\AVIA\\\\Desktop\\\\youTubeNew\\\\myTubeFull\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\AVIA\\\\Desktop\\\\youTubeNew\\\\myTubeFull\\\\client\\\\src\\\\state\\\\YouTube.store.js\";\nimport React, { useState, createContext, useContext, useEffect } from \"react\";\nconst YouTubeStore = createContext();\nconst Provider = YouTubeStore.Provider;\n\nconst useStore = () => {\n  const context = useContext(YouTubeStore);\n\n  if (!context) {\n    throw new Error(`useStore must be used within a Provider`);\n  }\n\n  return context;\n};\n\nconst YouTubeProvider = ({\n  children\n}) => {\n  let _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedVideo = _useState2[0],\n      setSelectedVideo = _useState2[1];\n\n  let _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      videos = _useState4[0],\n      setvideos = _useState4[1];\n\n  let _useState5 = useState(JSON.parse(localStorage.getItem('YTcatagories')) || []),\n      _useState6 = _slicedToArray(_useState5, 2),\n      catagories = _useState6[0],\n      setCatagories = _useState6[1];\n\n  let _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedCategory = _useState8[0],\n      setSelectedCategory = _useState8[1];\n\n  let _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      listVideos = _useState10[0],\n      setListVideos = _useState10[1];\n\n  const _useState11 = useState(JSON.parse(localStorage.getItem('YTuserProfile')) || {}),\n        _useState12 = _slicedToArray(_useState11, 2),\n        userProfile = _useState12[0],\n        setUserProfile = _useState12[1];\n\n  const _useState13 = useState(localStorage.getItem('YTuserToken') || null),\n        _useState14 = _slicedToArray(_useState13, 2),\n        userToken = _useState14[0],\n        setUserToken = _useState14[1];\n\n  const _useState15 = useState(JSON.parse(localStorage.getItem('YTisConnected')) || false),\n        _useState16 = _slicedToArray(_useState15, 2),\n        isConnected = _useState16[0],\n        setIsConnected = _useState16[1];\n\n  useEffect(() => {\n    localStorage.setItem(\"YTisConnected\", JSON.stringify(isConnected));\n\n    if (isConnected) {\n      localStorage.setItem(\"YTuserProfile\", JSON.stringify(userProfile));\n      localStorage.setItem(\"YTcatagories\", JSON.stringify(catagories));\n      localStorage.setItem(\"YTuserToken\", userToken);\n    } else {\n      localStorage.clear();\n    }\n  }, [isConnected, userProfile, catagories, userToken]);\n  console.log(catagories); // state = values to display\n\n  const state = {\n    selectedVideo,\n    videos,\n    catagories,\n    selectedCategory,\n    listVideos,\n    isConnected,\n    userProfile,\n    userToken\n  }; // actions = callbacks to invoke\n\n  const actions = {\n    setSelectedVideo,\n    setvideos,\n    setCatagories,\n    setSelectedCategory,\n    setListVideos,\n    setUserToken,\n    setIsConnected,\n    setUserProfile\n  };\n  return React.createElement(Provider, {\n    value: _objectSpread({}, state, {}, actions),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, children);\n};\n\nexport { YouTubeProvider, useStore };","map":{"version":3,"sources":["C:/Users/AVIA/Desktop/youTubeNew/myTubeFull/client/src/state/YouTube.store.js"],"names":["React","useState","createContext","useContext","useEffect","YouTubeStore","Provider","useStore","context","Error","YouTubeProvider","children","selectedVideo","setSelectedVideo","videos","setvideos","JSON","parse","localStorage","getItem","catagories","setCatagories","selectedCategory","setSelectedCategory","listVideos","setListVideos","userProfile","setUserProfile","userToken","setUserToken","isConnected","setIsConnected","setItem","stringify","clear","console","log","state","actions"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useContext,useEffect} from \"react\";\r\n\r\nconst YouTubeStore = createContext();\r\nconst { Provider } = YouTubeStore;\r\n\r\nconst useStore = () => {\r\n  const context = useContext(YouTubeStore);\r\n  if (!context) {\r\n    throw new Error(`useStore must be used within a Provider`);\r\n  }\r\n  return context;\r\n};\r\n\r\nconst YouTubeProvider = ({ children }) => {\r\n  let [selectedVideo, setSelectedVideo] = useState(null);\r\n  let [videos, setvideos] = useState([]);\r\n  let [catagories, setCatagories] = useState(JSON.parse(localStorage.getItem('YTcatagories')) || []);\r\n  let [selectedCategory, setSelectedCategory] = useState(\"\");\r\n  let [listVideos, setListVideos] = useState([]);\r\n  const [userProfile, setUserProfile] = useState(JSON.parse(localStorage.getItem('YTuserProfile')) || {});\r\n  const [userToken, setUserToken] = useState(localStorage.getItem('YTuserToken') || null);\r\n  const [isConnected, setIsConnected] = useState(JSON.parse( localStorage.getItem('YTisConnected')) || false);\r\n  \r\n  useEffect(() => {\r\n    localStorage.setItem(\"YTisConnected\", JSON.stringify(isConnected));\r\n    if(isConnected){\r\n      localStorage.setItem(\"YTuserProfile\", JSON.stringify(userProfile));\r\n      localStorage.setItem(\"YTcatagories\", JSON.stringify(catagories)); \r\n       localStorage.setItem(\"YTuserToken\", userToken);\r\n    }else{\r\n      localStorage.clear()\r\n    }\r\n\r\n  }, [isConnected,userProfile,catagories,userToken]);\r\n\r\n\r\n\r\n  console.log(catagories);\r\n\r\n  // state = values to display\r\n  const state = {\r\n    selectedVideo,\r\n    videos,\r\n    catagories,\r\n    selectedCategory,\r\n    listVideos,\r\n    isConnected,\r\n    userProfile,\r\n    userToken,\r\n  };\r\n  // actions = callbacks to invoke\r\n  const actions = {\r\n    setSelectedVideo,\r\n    setvideos,\r\n    setCatagories,\r\n    setSelectedCategory,\r\n    setListVideos,\r\n    setUserToken,\r\n    setIsConnected,\r\n    setUserProfile,\r\n  };\r\n  \r\n  return <Provider value={{ ...state, ...actions }}>{children}</Provider>;\r\n};\r\n\r\nexport { YouTubeProvider, useStore };\r\n"]},"metadata":{},"sourceType":"module"}